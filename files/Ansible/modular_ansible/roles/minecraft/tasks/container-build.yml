---
- name: Setup Build dir
  tempfile:
    state: directory
  register: temp_build_dir

- name: Set version pull
  set_fact:
    curl_command: curl -o /tmp/server.jar $(curl `curl -sL https://launchermeta.mojang.com/mc/game/version_manifest.json | ./jq -r '.latest.release as $release | .versions[] | select (.id == $release) | .url'` | ./jq -r '.downloads.server.url')

- name: Set version pull
  set_fact:
    curl_command: curl -o /tmp/server.jar $(curl `curl -sL https://launchermeta.mojang.com/mc/game/version_manifest.json | jq -r '.versions[] | select (.id == "{{ minecraft_version }}") | .url'` | jq -r '.downloads.server.url') 
  when: minecraft_version != "latest"

- name: Copy Dockerfile
  template:
    src: "Dockerfile.j2"
    dest: "/tmp/{{ temp_build_dir }}"

- name: Build mineOps - Minecraft Server
  podman_image:
    name: minecraft-server:{{ minecraft_build_tag }}
    path: "/tmp/{{ temp_build_dir }}"
    build:
      cache: no
      force_rm: yes
      format: oci

- name: Tag new image with latest
  containers.podman.podman_tag:
    image: minecraft-server:{{ minecraft_build_tag }}
    target_names:
      - latest
      
- name: Build and push an image using username and password
  podman_image:
    name: minecraft-server:{{ item }}
    push: yes
    push_args:
      dest: docker.io/mineops/minecraft-server
    tag: "{{ minecraft_build_tag }}"
    username: "{{ docker_hub_username }}"
    password: "{{ docker_hub_password }}"
  loop:
    - "{{ minecraft_build_tag }}"
    - latest

- name: Clean up
  file:
    state: absent
    path: "/tmp/{{ temp_build_dir }}"
